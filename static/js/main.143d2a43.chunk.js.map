{"version":3,"sources":["Home.js","Landing.js","Antigens/create.js","Antigens/edit.js","Antigens/view.js","Antigens/index.js","App.js","serviceWorker.js","index.js"],"names":["App","size","color","Body","className","subtitle","to","useState","mind","body","soul","folder","health","capacity","calcs","setCalcs","setArray","antigen","acc","Field","Label","Control","Input","type","placeholder","Column","onClick","url","useRouteMatch","path","List","title","Item","active","exact","component","CreateAntigen","render","EditAntigen","ViewAntigen","SwitchMenu","menuIsActive","toggleMenuIsActive","location","useLocation","React","useEffect","navBar","Brand","Burger","Menu","href","Container","position","Landing","Home","Antigens","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.143d2a43.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Section, Container, Hero, Heading } from 'react-bulma-components';\nimport {\n  Link,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Section>\n        <Container>\n          You loggged in!!\n          I have no clue what should go here if we have that navbar on top, really. Maybe some kind of recent events or something? Come back to it later I guess.\n      </Container>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Button, Section, Container, Hero, Heading } from 'react-bulma-components';\nimport {\n  Link,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Hero size=\"fullheight\" color=\"light\" >\n        <Hero.Body>\n          <Container>\n            <p className=\"has-text-centered\">\n              <Heading size={1}>AntiGens</Heading>\n              <Heading subtitle size={2}>\n                An A-Life inspired system for Discord servers!\n              </Heading>\n              <Link to=\"/home\">\n                <Button size=\"large\" color=\"primary\">Login with Discord</Button>\n              </Link>\n            </p>\n          </Container>\n        </Hero.Body>\n      </Hero>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Section,\n  Container,\n  Box,\n  Hero,\n  Heading,\n  Form,\n  Columns,\n  Content\n} from 'react-bulma-components';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport arrayMove from 'array-move';\n\nfunction App() {\n  const [calcs, setCalcs] = useState({\n    mind: 3, body: 2, soul: 1,\n    folder: 6, health: 6, capacity: 2\n  })\n\n  const setArray = (body, mind, soul, antigen) => {\n    let acc={}\n    acc.body=body;\n    acc.health = body*3;\n    acc.mind=mind;\n    acc.folder = mind*2;\n    acc.soul=soul;\n    acc.capacity = soul*2;\n    acc.antigen = antigen;\n\n    setCalcs(acc)\n  }\n\n  return (\n    <div>\n      <Section>\n        <Container>\n          <Heading>Create Antigen</Heading>\n          <Form.Field>\n            <Form.Label>Name</Form.Label>\n            <Form.Control>\n              <Form.Input type=\"text\" placeholder=\"Sugarsnap\" />\n            </Form.Control>\n          </Form.Field>\n          <Columns>\n            <Columns.Column>\n              <Form.Field>\n                <Form.Label>Stats</Form.Label>\n                <Form.Control>\n                  <Button onClick={()=>setArray(3,2,1,'mettaur')}>Mettaur</Button>\n                  <Button onClick={()=>setArray(2,1,3,'bunny')}>Bunny</Button>\n                  <Button onClick={()=>setArray(1,3,2,'cannodumb')}>Cannodumb</Button>\n                  <Button onClick={()=>setArray(1,2,3,'fishy')}>Fishy</Button>\n                  <Button onClick={()=>setArray(2,3,1,'spooky')}>Spooky</Button>\n                  <Button onClick={()=>setArray(3,1,2,'ratty')}>Ratty</Button>\n                </Form.Control>\n              </Form.Field>\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Scores</Form.Label>\n              <Content>\n                <p><strong>Mind</strong> {calcs.mind}</p>\n                <p><strong>Body</strong> {calcs.body}</p>\n                <p><strong>Soul</strong> {calcs.soul}</p>\n              </Content>\n\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Calculations</Form.Label>\n              <Content>\n                <p><strong>Folder</strong> {calcs.folder}</p>\n                <p><strong>Health</strong> {calcs.health}</p>\n                <p><strong>Capacity</strong> {calcs.capacity}</p>\n              </Content>\n\n            </Columns.Column>\n          </Columns>\n        </Container>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Section,\n  Container,\n  Box,\n  Hero,\n  Heading,\n  Form,\n  Columns,\n  Content\n} from 'react-bulma-components';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport arrayMove from 'array-move';\nimport {\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\n\nfunction App(url) {\n  return (\n    <div>\n      <Section>\n        <Container>\n          <Heading>SugarSnap</Heading>\n          <Link to={`${url}/view`}>View Profile</Link>\n          <Columns>\n            <Columns.Column>\n              <Form.Field>\n                <Form.Label>Stats</Form.Label>\n                <Form.Control>\n                  <Button>Mettaur</Button>\n                  <Button>Bunny</Button>\n                  <Button>Cannodumb</Button>\n                  <Button>Fishy</Button>\n                  <Button>Spooky</Button>\n                  <Button>Ratty</Button>\n                </Form.Control>\n              </Form.Field>\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Scores</Form.Label>\n              <Content>\n                <p><strong>Mind</strong> 3</p>\n                <p><strong>Body</strong> 2</p>\n                <p><strong>Soul</strong> 1</p>\n              </Content>\n\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Calculations</Form.Label>\n              <Content>\n                <p><strong>Folder</strong> 9</p>\n                <p><strong>Health</strong> 4</p>\n                <p><strong>Capacity</strong> 2</p>\n              </Content>\n\n            </Columns.Column>\n          </Columns>\n          <Columns>\n            <Columns.Column>\n              Chips Inventory\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n            <Columns.Column>\n              Chips Equipped\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n            <Columns.Column>\n              AddOns Inventory\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n            <Columns.Column>\n              AddOns Equipped\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n          </Columns>\n        </Container>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Section,\n  Container,\n  Box,\n  Hero,\n  Heading,\n  Form,\n  Columns,\n  Content\n} from 'react-bulma-components';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport arrayMove from 'array-move';\n\nfunction App() {\n  return (\n    <div>\n      <Section>\n        <Container>\n          <Heading>SugarSnap</Heading>\n          <Columns>\n            <Columns.Column>\n              <Form.Field>\n                <Form.Label>Stats</Form.Label>\n                <Form.Control>\n                  Mettaur\n                </Form.Control>\n              </Form.Field>\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Scores</Form.Label>\n              <Content>\n                <p><strong>Mind</strong> 3</p>\n                <p><strong>Body</strong> 2</p>\n                <p><strong>Soul</strong> 1</p>\n              </Content>\n\n            </Columns.Column>\n            <Columns.Column>\n              <Form.Label>Calculations</Form.Label>\n              <Content>\n                <p><strong>Folder</strong> 9</p>\n                <p><strong>Health</strong> 4</p>\n                <p><strong>Capacity</strong> 2</p>\n              </Content>\n\n            </Columns.Column>\n          </Columns>\n          <Columns>\n            <Columns.Column>\n              Chips Equipped\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n            <Columns.Column>\n              AddOns Equipped\n              <Box></Box>\n              <Box></Box>\n            </Columns.Column>\n          </Columns>\n        </Container>\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { useState } from 'react';\nimport { Menu, Columns, Button, Section, Container, Hero, Heading, Navbar } from 'react-bulma-components';\nimport {\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\nimport CreateAntigen from './create';\nimport EditAntigen from './edit';\nimport ViewAntigen from './view';\n\nfunction App() {\n  let { path, url } = useRouteMatch();\n\n  return (\n    <div>\n      <Columns>\n        <Columns.Column size=\"one-fifth\">\n          <Menu>\n            <Menu.List title=\"Gerry Gancer Dames\">\n              <Menu.List.Item active={false}>\n                <Link to={`${url}`}>New Antigen</Link>\n              </Menu.List.Item>\n              <Menu.List.Item active={true}>\n                <Link to={`${url}/edit`}>SugarSnap</Link>\n              </Menu.List.Item>\n            </Menu.List>\n          </Menu>\n        </Columns.Column>\n        <Columns.Column>\n          <Route exact path={path} component={CreateAntigen} />\n          <Route exact path={`${path}/edit`} render={()=>EditAntigen(url)} />\n          <Route exact path={`${path}/view`} component={ViewAntigen} />\n        </Columns.Column>\n      </Columns>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport { useState } from 'react';\nimport { Button, Section, Container, Hero, Heading, Navbar } from 'react-bulma-components';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useLocation\n} from \"react-router-dom\";\nimport Home from './Home';\nimport Landing from './Landing';\nimport Antigens from './Antigens/index';\n\nfunction SwitchMenu() {\n  const [menuIsActive, toggleMenuIsActive] = useState(false);\n  let location = useLocation();\n  React.useEffect(() => toggleMenuIsActive(false), [location]);\n\n  let navBar = (\n    <Navbar>\n      <Navbar.Brand>\n        <Navbar.Item>\n          <Link to=\"/home\">Home</Link>\n        </Navbar.Item>\n        <Navbar.Burger onClick={() => toggleMenuIsActive(!menuIsActive)} />\n      </Navbar.Brand>\n      <Navbar.Menu className={menuIsActive ? 'is-active' : ''}>\n        <Navbar.Item href=\"#\">\n          <Link to=\"/antigens\">Antigens</Link>\n        </Navbar.Item>\n        <Navbar.Container position=\"end\">\n          <Navbar.Item href=\"#\">\n            <Link to=\"/\">Log Out</Link>\n          </Navbar.Item>\n        </Navbar.Container>\n      </Navbar.Menu>\n    </Navbar>\n  )\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Landing />\n      </Route>\n      <Route path=\"/home\">\n        {navBar}\n        <Home />\n      </Route>\n      <Route path=\"/antigens\">\n        {navBar}\n        <Antigens />\n      </Route>\n    </Switch>\n  )\n}\nfunction App() {\n\n  return (\n    <Router>\n      <SwitchMenu />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}